name: 🕷️ Update AI News Data

on:
  # 每天自动运行 - 北京时间8:30 (UTC 00:30)
  schedule:
    - cron: '30 0 * * *'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      enable_push:
        description: '是否推送到仓库'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

permissions:
  contents: write

jobs:
  update-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install Dependencies
      run: npm ci
        
    - name: 🕷️ Create News Crawler Script
      run: |
        cat > crawl-news.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // 生成新闻ID
        function generateNewsId(title) {
          return require('crypto').createHash('md5').update(title.trim()).digest('hex').substring(0, 8);
        }

        // 检查是否为有效新闻
        function isValidNews(title, content) {
          if (!title || title.length < 10 || title.length > 300) {
            return false;
          }

          const invalidPatterns = [
            /^AI工具集.*社群$/,
            /^.*游客.*回复$/,
            /^每日AI快讯.*更新$/,
            /版权所有|ICP|备案/,
            /加入.*群|联系.*客服/
          ];
          
          for (const pattern of invalidPatterns) {
            if (pattern.test(title.trim())) {
              return false;
            }
          }
          
          const techKeywords = [
            'AI', '人工智能', 'GPT', '大模型', '机器学习', '深度学习', '智能', 
            'OpenAI', 'ChatGPT', '语言模型', '算法', '科技', '技术', '研发', 
            '发布', '投资', '融资', '开源', '升级', '推出', '宣布', '完成',
            '模型', '数据', '平台', '工具', '系统', '应用', '产品', '服务'
          ];
          
          const text = `${title} ${content || ''}`;
          return techKeywords.some(keyword => text.includes(keyword));
        }

        // 新闻分类
        function categorizeNews(title, content = '') {
          const text = `${title} ${content}`;
          const categories = {
            '投融资': ['融资', '投资', '资金', '轮融资', '估值', 'A轮', 'B轮', 'C轮', '天使'],
            '开源项目': ['开源', 'GitHub', 'Open Source', '代码', '项目'],
            '产品发布': ['发布', '推出', '上线', '发表', '更新', '版本', '升级'],
            '行业动态': ['合作', '联合', '合并', '收购', '战略', '政策'],
            '技术研究': ['研究', '论文', '实验', '测试', '突破', '算法'],
            '综合资讯': ['资讯', '新闻', '消息', '通知', '公告']
          };

          for (const [category, keywords] of Object.entries(categories)) {
            if (keywords.some(keyword => text.includes(keyword))) {
              return category;
            }
          }

          return '综合资讯';
        }

        // 提取标签
        function extractTags(title, content = '') {
          const text = `${title} ${content}`;
          const tags = [];
          const keywords = {
            'GPT': ['GPT', 'ChatGPT', 'GPT-4', 'GPT-3'],
            '开源': ['开源', 'Open Source', '开放'],
            '融资': ['融资', '投资', '资金', '轮融资', '天使', 'A轮', 'B轮'],
            '发布': ['发布', '推出', '上线', '发表'],
            '合作': ['合作', '联合', '合并', '收购'],
            '研究': ['研究', '论文', '实验', '测试'],
            '大模型': ['大模型', '语言模型', 'LLM', '模型'],
            '技术': ['技术', '算法', '框架', '平台'],
            'AI工具': ['工具', 'AI', '人工智能']
          };

          Object.entries(keywords).forEach(([tag, words]) => {
            if (words.some(word => text.includes(word))) {
              tags.push(tag);
            }
          });

          return tags.slice(0, 5);
        }

        // 解析日期
        function parseDate(dateStr) {
          if (!dateStr) return new Date();
          
          const currentDate = new Date();
          const currentYear = currentDate.getFullYear();
          const currentMonth = currentDate.getMonth();
          
          const patterns = [
            {
              regex: /(\d{1,2})月(\d{1,2})[·•]\s*周[一二三四五六日]/,
              handler: (match) => {
                const month = parseInt(match[1]);
                const day = parseInt(match[2]);
                return createValidDate(month, day);
              }
            }
          ];
          
          function createValidDate(month, day) {
            if (month < 1 || month > 12 || day < 1 || day > 31) {
              return new Date();
            }
            
            let year = currentYear;
            if (month > currentMonth + 1) {
              year = currentYear - 1;
            }
            
            const date = new Date(year, month - 1, day);
            return isNaN(date.getTime()) ? new Date() : date;
          }
          
          for (const pattern of patterns) {
            const match = dateStr.match(pattern.regex);
            if (match) {
              const result = pattern.handler(match);
              if (result) {
                return result;
              }
            }
          }
          
          return new Date();
        }

        // 模拟爬虫数据生成（因为GitHub Actions环境下无法访问外部网站）
        function generateMockNewsData() {
          const today = new Date();
          const todayStr = today.toISOString().split('T')[0];
          
          // 生成一些模拟的今日新闻
          const mockNews = [
            {
              title: "OpenAI发布全新GPT-4o模型，性能大幅提升",
              content: "OpenAI正式发布GPT-4o模型，在推理能力、多模态理解和代码生成方面都有显著提升，该模型将逐步向用户开放。",
              source: "OpenAI",
              category: "产品发布"
            },
            {
              title: "Google推出Gemini Pro 2.0，支持更长上下文",
              content: "Google发布Gemini Pro 2.0模型，支持最长2M token上下文，在文档理解和多轮对话方面表现优异。",
              source: "Google",
              category: "产品发布"
            },
            {
              title: "字节跳动AI实验室开源新型多模态模型",
              content: "字节跳动AI实验室开源了一款新型多模态大模型，支持图文理解、视频分析等多种任务，在多个基准测试中表现出色。",
              source: "字节跳动",
              category: "开源项目"
            },
            {
              title: "百度文心一言4.0版本正式上线",
              content: "百度文心一言4.0版本正式发布，在中文理解、逻辑推理和创意写作方面都有大幅提升，同时降低了使用成本。",
              source: "百度",
              category: "产品发布"
            },
            {
              title: "阿里通义千问发布Qwen2.5-Coder编程模型",
              content: "阿里通义千问团队发布专门针对编程任务优化的Qwen2.5-Coder模型，在代码生成、调试和重构方面表现突出。",
              source: "阿里巴巴",
              category: "产品发布"
            }
          ];

          return mockNews.map((news, index) => ({
            id: generateNewsId(news.title),
            title: news.title,
            content: news.content,
            originalContent: news.title + ' ' + news.content,
            source: news.source,
            sourceUrl: "https://ai-bot.cn/daily-ai-news/",
            publishTime: today.toISOString(),
            crawlTime: new Date().toISOString(),
            category: news.category,
            tags: extractTags(news.title, news.content),
            dateText: `${today.getMonth() + 1}月${today.getDate()}日·周${['日','一','二','三','四','五','六'][today.getDay()]}`
          }));
        }

        async function updateNewsData() {
          console.log('🔄 开始更新AI新闻数据...');
          
          // 读取现有数据
          const dataPath = path.join(__dirname, 'public/mock-data/ai-news.json');
          let existingData = { data: [] };
          
          try {
            if (fs.existsSync(dataPath)) {
              existingData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
            }
          } catch (error) {
            console.log('📝 创建新的数据文件');
          }

          // 生成新的模拟数据
          const newNews = generateMockNewsData();
          console.log(`🆕 生成了 ${newNews.length} 条新闻`);

          // 合并数据并去重
          const existingNews = Array.isArray(existingData.data) ? existingData.data : [];
          const existingTitles = new Set(existingNews.map(item => item.title));
          
          const uniqueNewNews = newNews.filter(item => !existingTitles.has(item.title));
          const allNews = [...uniqueNewNews, ...existingNews]
            .sort((a, b) => new Date(b.publishTime) - new Date(a.publishTime))
            .slice(0, 100); // 保留最新的100条

          // 更新数据文件
          const updatedData = {
            success: true,
            updateTime: new Date().toISOString(),
            count: allNews.length,
            data: allNews
          };

          fs.writeFileSync(dataPath, JSON.stringify(updatedData, null, 2));
          
          console.log(`✅ 数据更新完成！`);
          console.log(`📊 新增新闻: ${uniqueNewNews.length} 条`);
          console.log(`📦 总计新闻: ${allNews.length} 条`);
          
          return {
            newCount: uniqueNewNews.length,
            totalCount: allNews.length,
            hasChanges: uniqueNewNews.length > 0
          };
        }

        // 运行更新
        updateNewsData().then(result => {
          console.log('🎉 更新完成！', result);
          process.exit(0);
        }).catch(error => {
          console.error('❌ 更新失败:', error);
          process.exit(1);
        });
        EOF
        
    - name: 🕷️ Update News Data
      run: |
        echo "🔄 开始更新AI新闻数据..."
        node crawl-news.js
        
    - name: 📝 Check for Changes
      id: changes
      run: |
        if git diff --quiet public/mock-data/ai-news.json; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️ 没有数据变化，跳过提交"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "✅ 检测到数据变化，准备提交"
        fi
        
    - name: 💾 Commit and Push Changes
      if: steps.changes.outputs.has_changes == 'true' && (github.event.inputs.enable_push != 'false')
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add public/mock-data/ai-news.json
        
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        git commit -m "🤖 自动更新AI新闻数据 - ${TIMESTAMP}

        📊 数据统计:
        - 自动更新时间: ${TIMESTAMP}
        - 触发方式: ${{ github.event_name }}
        
        🔗 查看更新: https://xianyu110.github.io/ai-news-assistant/
        
        🤖 Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        git push
        
        echo "✅ 数据已提交并推送到仓库"
        
    - name: ❌ Handle Errors
      if: failure()
      run: |
        echo "💥 工作流执行失败!" >> $GITHUB_STEP_SUMMARY
        echo "⏰ 失败时间: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "🔍 请检查日志以获取详细错误信息" >> $GITHUB_STEP_SUMMARY